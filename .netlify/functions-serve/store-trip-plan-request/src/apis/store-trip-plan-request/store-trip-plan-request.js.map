{
  "version": 3,
  "sources": ["../../../../../../Users/sudhir/Documents/workspace/tourepedia-www/apis/store-trip-plan-request/store-trip-plan-request.ts"],
  "sourceRoot": "/var/folders/t6/0g1vz3x56ws39s1xznn11p8w0000gn/T/tmp-57584-0W94Xfso1T2Y",
  "sourcesContent": ["import { Handler } from '@netlify/functions'\n// import fetch, { Response } from 'node-fetch'\n\nconst SEMBARK_API_BASE_URL = process.env.SEMBARK_API_BASE_URL\nconst SEMBARK_API_ACCESS_TOKEN = process.env.SEMBARK_API_ACCESS_TOKEN\n\nexport const handler: Handler = async (event, context) => {\n  if (event.httpMethod.toLowerCase() !== 'post') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({\n        message: 'Method not allowed',\n      }),\n      headers: {\n        allow: 'post',\n      },\n    }\n  }\n  if (!SEMBARK_API_BASE_URL || !SEMBARK_API_ACCESS_TOKEN) {\n    const errors: Record<string, Array<string>> = {}\n    if (!SEMBARK_API_BASE_URL) {\n      errors['SEMBARK_API_BASE_URL'] = [\n        'Missing `SEMBARK_API_BASE_URL environment variable',\n      ]\n    }\n    if (!SEMBARK_API_ACCESS_TOKEN) {\n      errors['SEMBARK_API_ACCESS_TOKEN'] = [\n        'Missing `SEMBARK_API_ACCESS_TOKEN` environment variable',\n      ]\n    }\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: 'Missing environment variables',\n        errors: errors,\n      }),\n    }\n  }\n  let body: Record<string, string | number> = {}\n  try {\n    body = JSON.parse(event.body)\n  } catch (e) {\n    return {\n      statusCode: 422,\n      body: JSON.stringify({\n        message: 'Malformed request body',\n      }),\n    }\n  }\n  const {\n    name,\n    phone_number,\n    email,\n    destination,\n    start_date,\n    no_of_days,\n    no_of_adults,\n    no_of_children,\n    hotel_preference,\n    comments,\n    trip_source,\n  } = body\n\n  const data = {\n    name,\n    phone_number,\n    email,\n    destination,\n    start_date,\n    no_of_days,\n    no_of_adults,\n    no_of_children,\n    hotel_preference,\n    comments,\n    trip_source: trip_source || 'Website',\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      data,\n      SEMBARK_API_BASE_URL,\n      SEMBARK_API_ACCESS_TOKEN,\n    }),\n  }\n\n  // let response: Response\n  //\n  // try {\n  //   response = await fetch(`${API_BASE_URL}/trip-plan-requests`, {\n  //     method: 'POST',\n  //     body: JSON.stringify(data),\n  //     headers: {\n  //       accept: 'application/json',\n  //       authorization: `Bearer ${API_ACCESS_TOKEN}`,\n  //     },\n  //   })\n  // } catch (err) {\n  //   return {\n  //     statusCode: err.statusCode || 500,\n  //     body: JSON.stringify(err),\n  //   }\n  // }\n  //\n  // return {\n  //   statusCode: 200,\n  //   body: JSON.stringify({\n  //     data: response,\n  //   }),\n  // }\n}\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA;AAGA,IAAM,uBAAuB,QAAQ,IAAI;AACzC,IAAM,2BAA2B,QAAQ,IAAI;AAEtC,IAAM,UAAmB,OAAO,OAAO,YAAY;AACxD,MAAI,MAAM,WAAW,kBAAkB,QAAQ;AAC7C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA;AAAA,MAEX,SAAS;AAAA,QACP,OAAO;AAAA;AAAA;AAAA;AAIb,MAAI,CAAC,wBAAwB,CAAC,0BAA0B;AACtD,UAAM,SAAwC;AAC9C,QAAI,CAAC,sBAAsB;AACzB,aAAO,0BAA0B;AAAA,QAC/B;AAAA;AAAA;AAGJ,QAAI,CAAC,0BAA0B;AAC7B,aAAO,8BAA8B;AAAA,QACnC;AAAA;AAAA;AAGJ,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT;AAAA;AAAA;AAAA;AAIN,MAAI,OAAwC;AAC5C,MAAI;AACF,WAAO,KAAK,MAAM,MAAM;AAAA,WACjB,GAAP;AACA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA;AAAA;AAAA;AAIf,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAEJ,QAAM,OAAO;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAa,eAAe;AAAA;AAG9B,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;",
  "names": []
}
